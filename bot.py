rom aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
import asyncio
import google.generativeai as genai
import requests
import time
import os

# --- –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥–∞ ---
# –°–∫–æ–ø–∏—Ä—É–π config.example.py ‚Üí config.py –∏ –∑–∞–ø–æ–ª–Ω–∏
try:
    from config import *
except ImportError:
    raise Exception("–°–æ–∑–¥–∞–π config.py –Ω–∞ –æ—Å–Ω–æ–≤–µ config.example.py")

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Gemini ---
genai.configure(api_key=GEMINI_API_KEY)
gemini_model = genai.GenerativeModel('gemini-pro')

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ ---
bot = Bot(token=TELEGRAM_TOKEN)
dp = Dispatcher(bot)

# --- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ ---
def generate_news(topic="—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏"):
    prompt = f"–ù–∞–ø–∏—à–∏ –∫–æ—Ä–æ—Ç–∫—É—é, –∂–∏–≤—É—é –Ω–æ–≤–æ—Å—Ç—å –Ω–∞ 3‚Äì4 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –Ω–∞ —Ç–µ–º—É: {topic}. –ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞."
    response = gemini_model.generate_content(prompt)
    return response.text.strip()

# --- TTS: —Ç–µ–∫—Å—Ç –≤ —Ä–µ—á—å (Yandex) ---
def text_to_speech(text, output_file="audio.mp3"):
    url = 'https://tts.api.cloud.yandex.net/speech/v1/tts:synthesize'
    headers = {'Authorization': f'Api-Key {YANDEX_API_KEY}'}

    data = {
        'text': text,
        'lang': 'ru-RU',
        'voice': 'alena',
        'format': 'mp3',
        'speed': '1.0'
    }

    response = requests.post(url, headers=headers, data=data, stream=True)
    if response.status_code == 200:
        with open(output_file, 'wb') as f:
            f.write(response.content)
        return output_file
    else:
        raise Exception(f"TTS error: {response.text}")

# --- –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–µ–æ —Å –∞–≤–∞—Ç–∞—Ä–æ–º (D-ID) ---
def create_avatar_video(text):
    # –û–∑–≤—É—á–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç
    audio_file = "temp_audio.mp3"
    text_to_speech(text, audio_file)

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∞—É–¥–∏–æ –Ω–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ö–æ—Å—Ç–∏–Ω–≥
    with open(audio_file, 'rb') as f:
        upload_resp = requests.post('https://file.io', files={'file': f})
    audio_url = upload_resp.json()['link']

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ D-ID
    talk_url = "https://api.d-id.com/talks"
    headers = {
        "Authorization": DID_API_KEY,
        "Content-Type": "application/json"
    }

    payload = {
        "source_url": AVATAR_IMAGE_URL,
        "script": {
            "type": "audio",
            "audio_url": audio_url
        },
        "config": {
            "fluent": True,
            "pad_audio": 0.0
        }
    }

    response = requests.post(talk_url, json=payload, headers=headers)
    if response.status_code != 201:
        raise Exception(f"D-ID error: {response.text}")
    
    talk_id = response.json()['id']

    # –ñ–¥—ë–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
    while True:
        status = requests.get(f"{talk_url}/{talk_id}", headers=headers)
        data = status.json()
        if data.get('status') == 'done':
            return data['result_url']
        elif data.get('status') == 'error':
            raise Exception(f"–û—à–∏–±–∫–∞ D-ID: {data}")
        time.sleep(5)

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ ---
@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    await message.answer("üéôÔ∏è –ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî —Ü–∏—Ñ—Ä–æ–≤–æ–π –Ω–æ–≤–æ—Å—Ç–Ω–æ–π —Å–ø–∏–∫–µ—Ä. –ñ–º–∏ /news, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—ã–ø—É—Å–∫!")

@dp.message_handler(commands=['news'])
async def send_news(message: types.Message):
    await message.answer("‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –Ω–æ–≤–æ—Å—Ç—å...")

    try:
        # 1. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞
        text = generate_news("–Ω–æ–≤–æ—Å—Ç–∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π")

        # 2. –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–µ–æ (–≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ)
        loop = asyncio.get_event_loop()
        video_url = await loop.run_in_executor(None, create_avatar_video, text)

        # 3. –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–∏–¥–µ–æ
        await message.answer_video(video=video_url, caption="üé• –í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –≤—ã–ø—É—Å–∫ –Ω–æ–≤–æ—Å—Ç–µ–π")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)

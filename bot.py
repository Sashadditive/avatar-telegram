from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
import asyncio

# –ò–º–ø–æ—Ä—Ç –∫–æ–Ω—Ñ–∏–≥–∞
from config import TELEGRAM_TOKEN, YANDEX_GPT_API_KEY, FOLDER_ID, DID_API_KEY, AVATAR_IMAGE_URL

# –ò–º–ø–æ—Ä—Ç —É—Ç–∏–ª–∏—Ç
from utils.generate_text_yandex import generate_news_yandex
from utils.avatar import create_avatar_video

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ ---
bot = Bot(token=TELEGRAM_TOKEN)
dp = Dispatcher(bot)

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ---
@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    await message.answer("üéôÔ∏è –ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî —Ü–∏—Ñ—Ä–æ–≤–æ–π –Ω–æ–≤–æ—Å—Ç–Ω–æ–π —Å–ø–∏–∫–µ—Ä. –ñ–º–∏ /news, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—ã–ø—É—Å–∫!")

@dp.message_handler(commands=['news'])
async def send_news(message: types.Message):
    await message.answer("‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –Ω–æ–≤–æ—Å—Ç—å...")

    try:
        # 1. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ —á–µ—Ä–µ–∑ YandexGPT
        topic = "–ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –≤ –º–∏—Ä–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π"
        news_text = generate_news_yandex(
            topic=topic,
            api_key=YANDEX_GPT_API_KEY,
            folder_id=FOLDER_ID
        )

        # 2. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ —Å –∞–≤–∞—Ç–∞—Ä–æ–º
        loop = asyncio.get_event_loop()
        video_url = await loop.run_in_executor(
            None,
            create_avatar_video,
            news_text,
            YANDEX_GPT_API_KEY,  # –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ –∫–ª—é—á (–∏–ª–∏ –º–æ–∂–Ω–æ –æ—Ç–¥–µ–ª—å–Ω—ã–π TTS)
            DID_API_KEY,
            AVATAR_IMAGE_URL
        )

        # 3. –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–∏–¥–µ–æ
        await message.answer_video(video=video_url, caption="üé• –í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –≤—ã–ø—É—Å–∫ –Ω–æ–≤–æ—Å—Ç–µ–π")

    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

# --- –ó–∞–ø—É—Å–∫ ---
if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
